<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Codez Galore]]></title>
  <link href="http://JuliaLovel.github.io/atom.xml" rel="self"/>
  <link href="http://JuliaLovel.github.io/"/>
  <updated>2013-08-12T12:18:19-05:00</updated>
  <id>http://JuliaLovel.github.io/</id>
  <author>
    <name><![CDATA[Julia Lovel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SOLVED: Capistrano / SSH 'permission denied (publickey)']]></title>
    <link href="http://JuliaLovel.github.io/blog/2013/08/12/solved-capistrano-slash-ssh-permission-denied-publickey/"/>
    <updated>2013-08-12T11:54:00-05:00</updated>
    <id>http://JuliaLovel.github.io/blog/2013/08/12/solved-capistrano-slash-ssh-permission-denied-publickey</id>
    <content type="html"><![CDATA[<p><strong>Capistrano Tip:</strong>
Sometimes when deploying a project with Capistrano that I just know should work, or has already been working consistently, I will run into this error message all of a sudden:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ** [site.com :: out] Permission denied (publickey).
</span><span class='line'> ** fatal: The remote end hung up unexpectedly </span></code></pre></td></tr></table></div></figure>


<p>&hellip;Followed by rollback and failed message from cap. Here is what always works for me: Just run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh-add</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>This command adds your keys to the ssh-agent. <a href="http://linux.die.net/man/1/ssh-add">Here&rsquo;s the man page.</a></p>

<p>Also, here are the Capistrano recipe SSH config lines that work for me:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_run_options[:pty] = true
</span><span class='line'>ssh_options[:forward_agent] = true
</span><span class='line'>ssh_options[:keys] = %w(~/.ssh/id_rsa)
</span><span class='line'>ssh_options[:username] = 'local_user'</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOLVED: Git Error - 'fatal: Out of memory']]></title>
    <link href="http://JuliaLovel.github.io/blog/2013/08/08/solved-git-error-fatal-out-of-memory/"/>
    <updated>2013-08-08T17:56:00-05:00</updated>
    <id>http://JuliaLovel.github.io/blog/2013/08/08/solved-git-error-fatal-out-of-memory</id>
    <content type="html"><![CDATA[<p><strong>The Problem: You don&rsquo;t have enough RAM</strong></p>

<p>My regular dev machine, a MacBook Pro, crashed this week, and I found myself trying to get some work done on my old dev desktop while waiting on my genius bar appointment. I went to clone a project that I recently started working on, when I ran into this error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone
</span><span class='line'>fatal: Out of memory, malloc failed</span></code></pre></td></tr></table></div></figure>


<p>This error happens when you have an existing repository that has been used on a machine with more RAM than the machine you&rsquo;re currently on. Git pack objects have been created in the repository that are larger than your available memory, so you can&rsquo;t clone or do other operations on the repo.</p>

<!-- more -->


<p><strong>Step 1: Get to a copy of your Repo</strong></p>

<p>To fix this error, you need to have a working copy of the repo on some machine that you have access to. Luckily for me, although my repo is hosted on github, I had a copy of it on my MacBook&rsquo;s backup drive.</p>

<p>So, First: Copy the repo to your machine, or just log on the machine where you have another copy hosted, if you&rsquo;re able. Now:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd my-repo/</span></code></pre></td></tr></table></div></figure>


<p><strong>Step 2: Find out how much RAM you have</strong></p>

<p>In my case, I didn&rsquo;t remember how much RAM was in my old machine. An easy command to check your memory in linux is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo lshw -short -C memory</span></code></pre></td></tr></table></div></figure>


<p><strong>Step 3: Repack your git objects</strong></p>

<p>Tell git to use however much available memory you have for the max-pack-size:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git repack --max-pack-size=2M -a -d</span></code></pre></td></tr></table></div></figure>


<p>(Just replace &ldquo;2M&rdquo; with however much RAM you have.) The &ldquo;-d&rdquo; is important because it will delete the old pack objects that are too large in the process of repacking. That&rsquo;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Octopress to make a GitHub Pages blog site]]></title>
    <link href="http://JuliaLovel.github.io/blog/2013/08/08/using-octopress-to-make-a-github-pages-blog-site/"/>
    <updated>2013-08-08T16:08:00-05:00</updated>
    <id>http://JuliaLovel.github.io/blog/2013/08/08/using-octopress-to-make-a-github-pages-blog-site</id>
    <content type="html"><![CDATA[<p><strong>A Free, Easy Blog Solution</strong></p>

<p>For my first post, I thought I would share how I created this blog site.
This blog uses Octopress hosted on Github Pages. Github pages is a great way to host static HTML sites for free, and Octopress uses Jekyll and a set of rake commands to allow you to write posts in Markdown and compiles them into HTML automagically.</p>

<p>All I did to create this site was follow the simple steps from the Octopress docs.
Here&rsquo;s the link: <a href="http://octopress.org/docs/setup/">Octopress: Getting Started</a></p>

<!-- more -->


<p>And of course make sure to follow their instructions on deploying to Github Pages here:
<a href="http://octopress.org/docs/deploying/github/">Octopress: Deploying to Github Pages</a></p>

<p>Once your Octopress site is up and running, here are some resources to help you with making pretty blog posts:</p>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/basics">Daring Fireball&rsquo;s Markdown Basics guide</a></li>
<li><a href="http://opthemes.com">OctoPress Themes</a></li>
</ul>


<p>Also, if you&rsquo;re interested in making a static site that looks more like a book or manual, hosted for free on Github Pages, you might like to check out AAltSys&rsquo;s guide on creating a site using SphinxDoc, a Python package that allows you to write content in RST and can compile it into a variety of formats, such as HTML and PDF:
<a href="http://aaltsys.github.io/doc-publish/">AAltSys&rsquo;s doc-publish</a></p>
]]></content>
  </entry>
  
</feed>
